{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Gradle Doctor","text":"<p>The right prescription for your Gradle build.</p> <p>Watch this Virtual Android Makers 2019 entitled The Secrets of the Build Scan Plugin and the Internals of Gradle to learn more about what this plugin does.</p>"},{"location":"#usage","title":"Usage","text":"<ol> <li>Apply the Gradle Plugin to the root of your project.</li> <li>The Gradle Doctor will print suggestions for your build as you run regular tasks.</li> </ol> Groovy <pre><code>plugins {\nid \"com.osacky.doctor\" version \"0.12.0\"\n}\n</code></pre> Kotlin <pre><code>plugins {\nid(\"com.osacky.doctor\") version \"0.12.0\"\n}\n</code></pre> <p>For legacy plugin application, see the Gradle Plugin Portal.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Configurable warnings for build speed problems</li> <li>Measure time spent in Dagger annotation processors.</li> <li>Ensure <code>JAVA_HOME</code> is set and matches IDE's <code>JAVA_HOME</code></li> <li>Easily disable test caching. Tests may not declare all inputs causing false positives. Needed until Gradle implements a sandbox.</li> <li>Disable assembling all apps in repository simultaneously.</li> <li>Fail build when empty src directories are found. Empty src directories cause cache misses.</li> <li>Benchmarking remote build cache connection speed.</li> <li>Warnings for negative avoidance saving tasks.</li> <li>Build scan tags to easily find and categorize builds with warnings.</li> <li>Warn when not using Parallel GC in Java 9+.</li> <li>Warn or fail build when using a Rosetta-translated JDK on a Mac computer with Apple silicon. </li> </ul>"},{"location":"#configurable-warnings","title":"Configurable Warnings","text":"<ul> <li>Warn when build spends more than 10% of the time garbage collecting.</li> <li>Warn when connection to maven repositories is slowing down the build.</li> <li>Warn when build cache connection speed is slowing down the build.</li> </ul>"},{"location":"#supported-gradle-versions","title":"Supported Gradle versions","text":"<p>The minimum supported Gradle version is 6.1.1. If using Gradle 5.x, please use Gradle Doctor version 0.7.3.</p>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#0111","title":"0.11.1","text":"<ul> <li>Switch to Vanniktech Maven Publish Plugin - Simplified publishing configuration and improved GitHub Actions workflows</li> </ul>"},{"location":"changelog/#0110","title":"0.11.0","text":"<ul> <li>Remove Java 8 support</li> <li>Drop support for Gradle 6.8 and earlier.</li> <li>Deprecate <code>warnWhenNotUsingParallelGC</code></li> <li>Lazily read JAVA_HOME environment variable Fixes #408 Thanks ss-block</li> </ul>"},{"location":"changelog/#0100","title":"0.10.0","text":"<ul> <li>Fix Develocity deprecation warnings</li> <li>Add support for checking executables for Java home Thanks Slow Pacer</li> </ul>"},{"location":"changelog/#092","title":"0.9.2","text":"<ul> <li>Introduce execution modes for AppleRosettaTranslationCheck Thanks Egor Andreevich</li> </ul>"},{"location":"changelog/#091","title":"0.9.1","text":"<ul> <li>Ignore exit process status for rosetta translation check Thanks Andres Di Menna</li> </ul>"},{"location":"changelog/#090","title":"0.9.0","text":"<ul> <li>Implement Apple Rosetta Translation Check Thanks Gediminas Zukas</li> <li>Bump Kotlin language version to 1.5</li> </ul>"},{"location":"changelog/#081","title":"0.8.1","text":"<ul> <li>Fix compatibility with KGP 1.7.0 Thanks ZacSweers</li> </ul>"},{"location":"changelog/#080","title":"0.8.0","text":"<ul> <li>Skip multiple daemons check on non-Unix machines, not supported yet</li> <li>Detect Kotlin Compiler Daemon failing to connect.</li> <li>Support fail threshold for high GC usage</li> <li>Clean check is disabled in Gradle 7.4+, fixes compatibility with project isolation</li> </ul>"},{"location":"changelog/#073","title":"0.7.3","text":"<ul> <li>Fix compatiblity with Java 8.</li> </ul>"},{"location":"changelog/#072","title":"0.7.2","text":"<ul> <li>Fix exception when using Java 17 EA. PR Thanks ZacSweers</li> </ul>"},{"location":"changelog/#071","title":"0.7.1","text":"<ul> <li>Add error message for when the clean task has dependencies. PR</li> <li>Fix typo in <code>warnWhenJetifierEnabled</code> error message. PR Thanks kelvinharron</li> </ul>"},{"location":"changelog/#070","title":"0.7.0","text":"<ul> <li>Don't check for empty source directories in Gradle 6.8. Gradle now ignores them by default. PR</li> <li>Warn when not using parallel GC in java 9+. Fixes #125 PR</li> <li>Remove redundant \"doctor\" build scan tag.</li> </ul>"},{"location":"changelog/#063","title":"0.6.3","text":"<ul> <li>Fix ClassCastException caused by race condition. PR</li> </ul>"},{"location":"changelog/#062","title":"0.6.2","text":"<ul> <li>Add threshold for negative avoidance savings.</li> </ul>"},{"location":"changelog/#061","title":"0.6.1","text":"<ul> <li>Add build scan values for negative avoidance savings tasks.</li> <li>Prefix build scan tags with <code>doctor-</code> for easier searchability use wildcard <code>doctor-*</code> to find all build scans with doctor prescriptions.</li> </ul>"},{"location":"changelog/#060","title":"0.6.0","text":"<ul> <li>Add warning when Android Jetifier is enabled.</li> <li>Print tasks with negative avoidance savings from the cache. Fixes #86</li> <li>Add build scan tags to easily search and categorize builds. PR</li> </ul>"},{"location":"changelog/#051","title":"0.5.1","text":"<ul> <li>Fix bugs in JAVA_HOME check #110. Thanks ZacSweers</li> </ul>"},{"location":"changelog/#050","title":"0.5.0","text":"<ul> <li>Check for farthest empty parent for reporting file to remove #105. Fixes #96 Thanks ZacSweers</li> </ul> <p>Breaking API change</p> <p>Add more granularity to <code>JAVA_HOME</code> checks #104. Fixes #98 Thanks ZacSweers</p>"},{"location":"changelog/#043","title":"0.4.3","text":"<ul> <li>Experimental Configuration Cache support. Note: it is not fully supported, but it will not generate warnings.</li> </ul>"},{"location":"changelog/#042","title":"0.4.2","text":"<ul> <li>Fix bug when running remote build cache benchmark and specifying a custom build cache directory.</li> </ul>"},{"location":"changelog/#041","title":"0.4.1","text":"<ul> <li>Fix confusing warning about slow connection to maven repositories.</li> <li>Publish marker to maven central.</li> </ul>"},{"location":"changelog/#040","title":"0.4.0","text":"<ul> <li>More control over which tasks are re-run in remote cache benchmark. See README.md for more information.</li> <li>Use Gradle Properties for lazy configuration and future configuration caching support. (Breaking API change)</li> <li>Fix performance by not using <code>afterEvaluate</code>.</li> </ul>"},{"location":"changelog/#034","title":"0.3.4","text":"<ul> <li>Correctly calculate download speeds for build cache and remote repositories.</li> </ul>"},{"location":"changelog/#033","title":"0.3.3","text":"<ul> <li>Print out number of tasks which were forced to re-execute.</li> </ul>"},{"location":"changelog/#032","title":"0.3.2","text":"<ul> <li>Fix NPE when calculating remote benchmark cache.</li> </ul>"},{"location":"changelog/#031","title":"0.3.1","text":"<ul> <li>Fix megabyte estimation</li> <li>Also add include Android resource compilation tasks in remote build cache estimation.</li> </ul>"},{"location":"changelog/#030","title":"0.3.0","text":"<ul> <li>Ability to benchmark remote build cache connection speed.</li> </ul>"},{"location":"configuration/","title":"Configuration","text":""},{"location":"configuration/#sample-configuration","title":"Sample Configuration","text":"Groovy <pre><code>doctor {\n/**\n   * Throw an exception when multiple Gradle Daemons are running.\n   *\n   * Windows is not supported yet, see https://github.com/runningcode/gradle-doctor/issues/84\n   */\ndisallowMultipleDaemons = false\n/**\n   * Show a message if the download speed is less than this many megabytes / sec.\n   */\ndownloadSpeedWarningThreshold = .5f\n/**\n   * The level at which to warn when a build spends more than this percent garbage collecting.\n   */\nGCWarningThreshold = 0.10f\n/**\n   * The level at which to fail when a build spends more than this percent garbage collecting.\n   */\nGCFailThreshold = 0.9f\n/**\n   * Print a warning to the console if we spend more than this amount of time with Dagger annotation processors.\n   */\ndaggerThreshold = 5000\n/**\n   * By default, Gradle caches test results. This can be dangerous if tests rely on timestamps, dates, or other files\n   * which are not declared as inputs.\n   */\nenableTestCaching = true\n/**\n   * By default, Gradle treats empty directories as inputs to compilation tasks. This can cause cache misses.\n   */\nfailOnEmptyDirectories = true\n/**\n   * Do not allow building all apps simultaneously. This is likely not what the user intended.\n   */\nallowBuildingAllAndroidAppsSimultaneously = false\n/**\n   * Warn if using Android Jetifier. It slows down builds.\n   */\nwarnWhenJetifierEnabled = true\n/**\n    * Negative Avoidance Savings Threshold\n    * By default the Gradle Doctor will print out a warning when a task is slower to pull from the cache than to\n    * re-execute. There is some variance in the amount of time a task can take when several tasks are running\n    * concurrently. In order to account for this there is a threshold you can set. When the difference is above the\n    * threshold, a warning is displayed.\n    */\nnegativeAvoidanceThreshold = 500\n/**\n   * Warn when not using parallel GC. Parallel GC is faster for build type tasks and is no longer the default in Java 9+.\n   */\nwarnWhenNotUsingParallelGC = true\n/**\n   * Throws an error when the `Delete` or `clean` task has dependencies.\n   * If a clean task depends on other tasks, clean can be reordered and made to run after the tasks that would produce\n   * output. This can lead to build failures or just strangeness with seemingly straightforward builds\n   * (e.g., gradle clean build).\n   * http://github.com/gradle/gradle/issues/2488\n   */\ndisallowCleanTaskDependencies = true\n/**\n   * Warn if using the Kotlin Compiler Daemon Fallback. The fallback is incredibly slow and should be avoided.\n   * https://youtrack.jetbrains.com/issue/KT-48843\n   */\nwarnIfKotlinCompileDaemonFallback = true\n/**\n   * The mode in which the Apple Rosetta translation check is executed.\n   */\nappleRosettaTranslationCheckMode = AppleRosettaTranslationCheckMode.ERROR\n\n\n/** Configuration properties relating to JAVA_HOME */\njavaHome {\n/**\n     * Ensure that we are using JAVA_HOME to build with this Gradle.\n     */\nensureJavaHomeMatches = true\n/**\n     * Ensure we have JAVA_HOME set.\n     */\nensureJavaHomeIsSet = true\n/**\n     * Fail on any `JAVA_HOME` issues.\n     */\nfailOnError.set(true)\n/**\n     * Extra message text, if any, to show with the Gradle Doctor message. This is useful if you have a wiki page or\n     * other instructions that you want to link for developers on your team if they encounter an issue.\n     */\nextraMessage.set(\"Here's an extra message to show.\")\n}\n}\n</code></pre> Kotlin <pre><code>doctor {\n/**\n   * Throw an exception when multiple Gradle Daemons are running.\n   * \n   * Windows is not supported yet, see https://github.com/runningcode/gradle-doctor/issues/84\n   */\ndisallowMultipleDaemons.set(false)\n/**\n   * Show a message if the download speed is less than this many megabytes / sec.\n   */\ndownloadSpeedWarningThreshold.set(.5f)\n/**\n   * The level at which to warn when a build spends more than this percent garbage collecting.\n   */\nGCWarningThreshold.set(0.10f)\n/**\n   * The level at which to fail when a build spends more than this percent garbage collecting.\n   */\nGCFailThreshold = 0.9f\n/**\n   * Print a warning to the console if we spend more than this amount of time with Dagger annotation processors.\n   */\ndaggerThreshold.set(5000)\n/**\n   * By default, Gradle caches test results. This can be dangerous if tests rely on timestamps, dates, or other files\n   * which are not declared as inputs.\n   */\nenableTestCaching.set(true)\n/**\n   * By default, Gradle treats empty directories as inputs to compilation tasks. This can cause cache misses.\n   */\nfailOnEmptyDirectories.set(true)\n/**\n   * Do not allow building all apps simultaneously. This is likely not what the user intended.\n   */\nallowBuildingAllAndroidAppsSimultaneously.set(false)\n/**\n   * Warn if using Android Jetifier. It slows down builds.\n   */\nwarnWhenJetifierEnabled.set(true)\n/**\n    * Negative Avoidance Savings Threshold\n    * By default the Gradle Doctor will print out a warning when a task is slower to pull from the cache than to\n    * re-execute. There is some variance in the amount of time a task can take when several tasks are running\n    * concurrently. In order to account for this there is a threshold you can set. When the difference is above the\n    * threshold, a warning is displayed.\n    */\nnegativeAvoidanceThreshold.set(500)\n/**\n    * Warn when not using parallel GC. Parallel GC is faster for build type tasks and is no longer the default in Java 9+.\n    */\nwarnWhenNotUsingParallelGC.set(true)\n/**\n    * Throws an error when the `Delete` or `clean` task has dependencies.\n    * If a clean task depends on other tasks, clean can be reordered and made to run after the tasks that would produce\n    * output. This can lead to build failures or just strangeness with seemingly straightforward builds\n    * (e.g., gradle clean build).\n    * http://github.com/gradle/gradle/issues/2488\n    */\ndisallowCleanTaskDependencies.set(true)\n/**\n    * Warn if using the Kotlin Compiler Daemon Fallback. The fallback is incredibly slow and should be avoided.\n    * https://youtrack.jetbrains.com/issue/KT-48843\n    */\nwarnIfKotlinCompileDaemonFallback.set(true)\n/**\n    * The mode in which the Apple Rosetta translation check is executed.\n    */\nappleRosettaTranslationCheckMode.set(AppleRosettaTranslationCheckMode.ERROR)\n\n/** Configuration properties relating to JAVA_HOME */\njavaHome {\n/**\n     * Ensure that we are using JAVA_HOME to build with this Gradle.\n     */\nensureJavaHomeMatches.set(true)\n/**\n     * Ensure we have JAVA_HOME set.\n     */\nensureJavaHomeIsSet.set(true)\n/**\n     * Fail on any `JAVA_HOME` issues.\n     */\nfailOnError.set(true)\n/**\n     * Extra message text, if any, to show with the Gradle Doctor message. This is useful if you have a wiki page or\n     * other instructions that you want to link for developers on your team if they encounter an issue.\n     */\nextraMessage.set(\"Here's an extra message to show.\")\n}\n}\n</code></pre> <p>Configuration extension code is here.</p>"},{"location":"java-home/","title":"Java Home Mismatch and Multiple Gradle Daemons","text":"<p>Using a different JDK for command line builds vs Android Studio or IntelliJ builds will cause a new Gradle daemon to spawn. This will instantly double the memory being used by Gradle.</p> <p>To fix this issue, we recommend setting your JAVA_HOME environment variable and then using this JAVA_HOME as the JDK used by Android Studio or IntelliJ.</p>"},{"location":"java-home/#set-java_home","title":"Set JAVA_HOME","text":"<p>Set <code>JAVA_HOME</code> so that switching between Android Studio or IntelliJ and the terminal does not trigger a full rebuild.</p> <p>To set <code>JAVA_HOME</code> (using bash): <code>echo \\\"export JAVA_HOME=${'$'}(/usr/libexec/java_home)\\\" &gt;&gt; ~/.bash_profile</code> or <code>~/.zshrc</code> if using <code>zsh</code>.</p>"},{"location":"java-home/#using-java_home-from-android-studio","title":"Using JAVA_HOME from Android Studio:","text":"<p>To Fix:</p> <ol> <li> <p>Open Module Settings (F4) </p> </li> <li> <p>Click SDK Location</p> </li> <li> <p>Set JDK location to JAVA_HOME </p> </li> </ol>"},{"location":"java-home/#view-all-gradle-daemons","title":"View all Gradle Daemons","text":"<p><code>jps</code> will print out all the java processes on the system and the process id (pid).</p>"},{"location":"java-home/#killing-gradle-daemons","title":"Killing Gradle Daemons","text":"<p><code>./gradlew --stop</code> will kill all Gradle Daemons with the current Gradle version.</p> <p><code>pkill -f '.*GradleDaemon.*'</code> will kill all Gradle Daemons regardless of version.</p>"},{"location":"releasing/","title":"Releasing","text":""},{"location":"releasing/#prerequisites","title":"Prerequisites","text":"<p>Ensure you have the following GitHub secrets configured:</p> <ul> <li><code>SONATYPE_USERNAME</code>: Your Sonatype username</li> <li><code>SONATYPE_PASSWORD</code>: Your Sonatype password</li> <li><code>GPG_SIGNING_KEY</code>: Your exported ASCII-armored GPG private key</li> <li><code>GPG_SIGNING_KEY_ID</code>: Your GPG key ID</li> <li><code>GPG_SIGNING_KEY_PASSWORD</code>: Your GPG key password</li> <li><code>GRADLE_PUBLISH_KEY</code>: Your Gradle Plugin Portal API key</li> <li><code>GRADLE_PUBLISH_SECRET</code>: Your Gradle Plugin Portal API secret</li> </ul>"},{"location":"releasing/#release-process","title":"Release Process","text":""},{"location":"releasing/#option-1-automated-release-recommended","title":"Option 1: Automated Release (Recommended)","text":"<ul> <li>Create a local release branch from <code>master</code></li> </ul> <pre><code>git checkout master\ngit pull\ngit checkout -b release_0.12.1\n</code></pre> <ul> <li>Update <code>version</code> in <code>doctor-plugin/build.gradle.kts</code> (remove <code>-SNAPSHOT</code>)</li> </ul> <pre><code>version = \"0.12.1\"\n</code></pre> <ul> <li>Update the current version and next version in <code>mkdocs.yml</code>:</li> </ul> <pre><code>extra:\n  doctor:\n    release: '0.12.1'\n    next_release: 'REPLACE_WITH_NEXT_VERSION_NUMBER'\n</code></pre> <ul> <li>Take one last look</li> </ul> <pre><code>git diff\n</code></pre> <ul> <li>Commit all local changes</li> </ul> <pre><code>git commit -am \"Prepare 0.12.1 release\"\n</code></pre> <ul> <li>Push the release branch</li> </ul> <pre><code>git push origin release_0.12.1\n</code></pre> <ul> <li> <p>Create a pull request and merge to master</p> </li> <li> <p>Create a GitHub Release:</p> </li> <li> <p>Go to the GitHub repository</p> </li> <li>Click \"Releases\" \u2192 \"Create a new release\"</li> <li>Tag version: <code>v0.12.1</code> (this will create a tag starting with <code>v</code>)</li> <li>Release title: <code>0.12.1</code></li> <li>Add release notes</li> <li> <p>Click \"Publish release\"</p> </li> <li> <p>The GitHub Action will automatically:</p> </li> <li> <p>Publish to Maven Central (staging)</p> </li> <li> <p>Publish to Gradle Plugin Portal</p> </li> <li> <p>Merge the release branch to master</p> </li> </ul> <pre><code>git checkout master\ngit pull\ngit merge --no-ff release_0.12.1\n</code></pre> <ul> <li>Update <code>version</code> in <code>doctor-plugin/build.gradle.kts</code> (increase version and add <code>-SNAPSHOT</code>)</li> </ul> <pre><code>version = \"REPLACE_WITH_NEXT_VERSION_NUMBER-SNAPSHOT\"\n</code></pre> <ul> <li>Commit your changes</li> </ul> <pre><code>git commit -am \"Prepare for next development iteration\"\n</code></pre> <ul> <li>Push your changes</li> </ul> <pre><code>git push\n</code></pre>"},{"location":"releasing/#option-2-manual-release","title":"Option 2: Manual Release","text":"<p>If you prefer manual control over the release process:</p> <ul> <li> <p>Follow steps 1-8 from Option 1 above</p> </li> <li> <p>Upload to Maven Central</p> </li> </ul> <pre><code>./gradlew publishToMavenCentral --no-configuration-cache\n</code></pre> <ul> <li> <p>Release to Maven Central manually:</p> </li> <li> <p>Login to Central Portal: https://central.sonatype.org/</p> </li> <li>Navigate to your staging repository</li> <li> <p>Find your staging repository and click Release</p> </li> <li> <p>Upload to Gradle Plugin Portal</p> </li> </ul> <pre><code>./gradlew publishToGradlePlugin\n</code></pre> <ul> <li>Follow steps 9-12 from Option 1 above</li> </ul>"},{"location":"releasing/#workflow-files","title":"Workflow Files","text":"<p>The repository uses <code>.github/workflows/gradle-release.yml</code> for releases, which triggers when a GitHub Release is published and uploads to staging and requires manual release on Central Portal.</p>"},{"location":"releasing/#snapshot-publishing","title":"Snapshot Publishing","text":"<p>Snapshots are automatically published to Maven Central when changes are pushed to the <code>master</code> branch.</p>"},{"location":"remote-cache/","title":"Remote Build Cache Benchmark","text":""},{"location":"remote-cache/#more-information","title":"More information","text":"<p>How fast does my internet connection need to be in order to benefit from the Gradle Remote Build Cache?</p> <p>Read Part 1 and Part 2</p>"},{"location":"remote-cache/#basic-benchmark","title":"Basic Benchmark","text":"<p>To start the benchmark, run a Gradle task that you would like to profile with the flag <pre><code>-PbenchmarkRemoteCache\n</code></pre></p> <p>To force tasks to rerun for the benchmark, use <code>-PrerunSourceTasksForBenchmark</code> and <code>-PrerunLargeOutputTasksForBenchmark</code> to control which tasks are forced to re-run as part of the benchmark.</p> <p>Example full benchmark scenario: <pre><code>./gradlew :app:assembleDebug -PbenchmarkRemoteCache -PrerunSourceTasksForBenchmark -PrerunLargeOutputTasksForBenchmark\n</code></pre></p>"},{"location":"remote-cache/#customized-benchmark-scenario","title":"Customized Benchmark Scenario","text":"<p>You can also omit the rerun properties in order to measure the individual performance of specific tasks by forcing tasks to rerun with <code>outputs.upToDateWhen { false }</code>. For example: <pre><code>tasks.withType(SourceTask).configureEach {\noutputs.upToDateWhen { false }\n}\n</code></pre></p> <p>Then run the specific benchmark scenario like so: <pre><code>./gradlew :app:assembleDebug -PbenchmarkRemoteCache\n</code></pre></p>"},{"location":"remote-cache/#benchmark-result-report","title":"Benchmark Result Report","text":"<p>This is an example remote cache benchmark report. <pre><code>=============================== Gradle Doctor Prescriptions ============================================\n| = Remote Build Cache Benchmark Report =                                                              |\n| Executed tasks created compressed artifacts of size 159,93 MB                                        |\n| Total Task execution time was 208,85 s                                                               |\n|                                                                                                      |\n| In order for a remote build cache to save you time, you would need an internet connection to your    |\n| node of at least 0,77 MB/s.                                                                          |\n| Check a build scan to see your connection speed to the build cache node.                             |\n| Build cache node throughput may be different than your internet connection speed.                    |\n|                                                                                                      |\n| A 1 MB/s connection would save you 48,92 s.                                                          |\n| A 2 MB/s connection would save you 128,88 s.                                                         |\n| A 10 MB/s connection would save you 192,86 s. i                                                      |\n|                                                                                                      |\n| Note: This is an estimate. Real world performance may vary. This estimate does not take in to accoun |\n| t time spent decompressing cached artifacts or roundtrip communication time to the cache node.       |\n========================================================================================================\n</code></pre></p>"},{"location":"scan-tags/","title":"Build Scan Tags","text":"<p>Gradle Doctor automatically adds build scan tags to help categorize and filter builds when using Develocity.</p> <p>The <code>doctor</code> tag will be added to a build when a prescription is suggested by the Gradle Doctor.</p> <p>In addition to the <code>doctor</code> tag, the following tags will also be added depending on the prescription. You can search for all of these tags by entering <code>doctor-*</code> in the tags in the build scan list.</p> <ul> <li><code>doctor-high-gc</code> - build spends a longer percentage GCing than defined by <code>GCWarningThreshold</code>. Default 10%.</li> <li><code>doctor-negative-savings</code> - build had a task that took longer to pull from the cache than it would take to re-execute. See negative savings for information on how to avoid this.</li> <li><code>doctor-slow-build-cache-connection</code> - build's connection speed to the build cache slower than the minimum speeds defined by <code>downloadSpeedWarningThreshold</code>. Default 0.5MB/s.</li> <li><code>doctor-slow-maven-connection</code> - build's connection speed to maven repositories was slower than the minimum speeds defined by <code>downloadSpeedWarningThreshold</code>. Default 0.5MB/s.</li> <li><code>doctor-long-dagger-time</code> - build spent longer with Dagger annotation processors than minimum defined by <code>daggerThreshold</code>. Default: 5 seconds.</li> <li><code>doctor-java-home</code> - <code>JAVA_HOME</code> is not defined or does not match the <code>JAVA_HOME</code> used in this build.</li> </ul>"},{"location":"slower-from-cache/","title":"Slower From Cache (Negative Savings)","text":"<p>Some tasks may be slower to pull from the Gradle Build cache. The hardware of the machine running the origin task and which computations are running in parallel when pulling from the cache or up-to-date checking may also cause slower from cache times than the original task. In general, tasks that are computationally cheap but expensive on the disk are not good candidates to be cached.</p> <p>The threshold can be increased by setting <code>negativeAvoidanceThreshold</code> in the doctor configuration.</p> Groovy <pre><code>negativeAvoidanceThreshold = 500\n</code></pre> Kotlin <pre><code>negativeAvoidanceThreshold.set(500)\n</code></pre>"},{"location":"slower-from-cache/#copy-tasks","title":"Copy tasks","text":"<p>A copy task should not be cached. The output of a copy task would need to be compressed and then stored in the build cache. To restore the copy task from the cache, Gradle would decompress the outputs and then rewrite them in the output directories. Simply performing the copy again would simply move the files from their original location without need to compress and then decompress them.</p>"},{"location":"slower-from-cache/#non-compressible-outputs","title":"Non compressible outputs","text":"<p>Tasks which generate large output which is not easily compressible may also not be good candidates for the build cache. Tasks that move compressed images like pngs, jpegs, or precomputed libraries are not good caching candidates.</p>"},{"location":"slower-from-cache/#disabling-caching","title":"Disabling caching","text":"Groovy <pre><code>tasks.named('&lt;taskname&gt;').configure {\noutputs.cacheIf { false }\n}\n</code></pre> Kotlin <pre><code>tasks.named(\"&lt;taskname&gt;\").configure {\noutputs.cacheIf { false }\n}\n</code></pre>"},{"location":"slower-from-cache/#disabling-remote-caching","title":"Disabling remote caching","text":"<p>Some Gradle tasks may be beneficial to cache locally but not on CI. There is currently no mechanism to only disable remote caching of tasks. A workaround is to disable the cache entry being placed in to the remote build cache.</p> Groovy <pre><code>tasks.named('&lt;taskname&gt;').configure {\noutputs.cacheIf { !isCI }\n}\n</code></pre> Kotlin <pre><code>tasks.named(\"&lt;taskname&gt;\").configure {\noutputs.cacheIf { !isCI }\n}\n</code></pre> <p>See Remote Build Cache Benchmark for more information on estimating whether it is beneficial to remotely cache tasks.</p>"}]}